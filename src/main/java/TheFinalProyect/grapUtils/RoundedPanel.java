/**
 * LICENSE: GNU General Public License v3.0
 * For more information, visit: https://www.gnu.org/licenses/gpl-3.0.html
 * 
 * Author: D
 * Version: Beta 1.0
 * 
 * Description:
 * Este paquete contiene utilidades en desarrollo para mejorar la experiencia gráfica 
 * en aplicaciones Java con Swing. Actualmente, algunas características pueden estar 
 * incompletas, mal implementadas o presentar errores. Se recomienda usarlo con precaución 
 * y reportar cualquier problema o sugerencia en el repositorio oficial de GitHub.
 * 
 * GitHub: https://github.com/diegojes22
 * 
 * Nota:
 * Este código es de uso libre bajo la licencia GNU-GPL3. Si encuentras útil este trabajo 
 * o deseas colaborar, no dudes en contribuir al proyecto. Cada comentario, reporte o mejora 
 * es bienvenido.
 * 
 * ATTE: D
 */

package com.d.thefinalproyect.grapUtils;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

/**
 * Un panel personalizado con esquinas redondeadas y soporte para transparencia.
 * 
 * Este componente extiende {@code JPanel} y permite definir un radio 
 * personalizado para las esquinas. También soporta un fondo transparente 
 * y bordes suaves gracias al uso de {@code Graphics2D} con antialiasing.
 * 
 * Ejemplo de uso:
 * <pre>
 * RoundedPanel panel = new RoundedPanel(20);
 * panel.setBackground(Color.BLUE); // Establece el color de fondo
 * add(panel);                      // Agrega el panel a tu contenedor
 * </pre>
 */
public class RoundedPanel extends javax.swing.JPanel {
    ///
    /// Atributos
    ///
    private int cornerRadius; // Radio de las esquinas
    
    ///
    /// Metodos
    ///
    /**
     * Crea un nuevo {@code RoundedPanel} con un radio de esquinas definido.
     * Es compatible con los atributos originales de JPanel de swing.
     * 
     * @param radius el radio (en píxeles) para las esquinas redondeadas.
     */
    public RoundedPanel(int radius) {
        initComponents();
        
        this.cornerRadius = radius;
        setOpaque(false); // Permite que el fondo sea transparente
    }
    
    /**
     * Sobrescribe el método {@code paintComponent} para dibujar el panel con esquinas redondeadas.
     * 
     * Este método utiliza {@code Graphics2D} para habilitar el antialiasing 
     * y garantizar bordes suaves en el panel.
     * 
     * @param g el contexto gráfico del componente.
     */
     @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Convierte el Graphics a Graphics2D para mejorar el control del dibujo
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Color de fondo del panel
        g2.setColor(getBackground());
        g2.fillRoundRect(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius);

        // Color del borde del panel
        g2.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, cornerRadius, cornerRadius);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    // End of variables declaration                   
}